import { toast } from 'sonner@2.0.3';

export const demoNotifications = {
  // Notifications pour les logements
  unitCreated: (unitNumber: string) => {
    toast.success(`Logement ${unitNumber} crÃ©Ã© avec succÃ¨s !`, {
      description: 'Les statistiques de la propriÃ©tÃ© ont Ã©tÃ© mises Ã  jour',
      duration: 4000,
    });
  },

  unitUpdated: (unitNumber: string) => {
    toast.success(`Logement ${unitNumber} modifiÃ© avec succÃ¨s !`, {
      description: 'Les modifications sont visibles immÃ©diatement',
      duration: 3000,
    });
  },

  unitDeleted: (unitNumber: string) => {
    toast.success(`Logement ${unitNumber} supprimÃ©`, {
      description: 'Les donnÃ©es ont Ã©tÃ© mises Ã  jour en temps rÃ©el',
      duration: 3000,
    });
  },

  // Notifications pour les locataires
  tenantCreated: (tenantName: string, unitNumber?: string) => {
    const description = unitNumber 
      ? `AssignÃ© au logement ${unitNumber}. Le statut du logement a Ã©tÃ© mis Ã  jour.`
      : 'Locataire ajoutÃ© sans logement assignÃ©';
    
    toast.success(`Locataire ${tenantName} ajoutÃ© !`, {
      description,
      duration: 4000,
    });
  },

  tenantAssigned: (tenantName: string, unitNumber: string) => {
    toast.success(`${tenantName} assignÃ© au logement ${unitNumber}`, {
      description: 'Le statut du logement est maintenant "OccupÃ©"',
      duration: 4000,
    });
  },

  tenantRemoved: (tenantName: string, unitNumber?: string) => {
    const description = unitNumber 
      ? `Le logement ${unitNumber} est maintenant disponible`
      : 'Locataire retirÃ© de la base de donnÃ©es';
    
    toast.success(`Locataire ${tenantName} retirÃ©`, {
      description,
      duration: 3000,
    });
  },

  // Notifications pour la maintenance
  maintenanceCreated: (title: string, unitNumber: string) => {
    toast.success('Demande de maintenance crÃ©Ã©e !', {
      description: `${title} - Logement ${unitNumber}`,
      duration: 4000,
    });
  },

  maintenanceStatusUpdated: (title: string, newStatus: string) => {
    const statusMap = {
      'pending': 'En attente',
      'in-progress': 'En cours',
      'scheduled': 'PlanifiÃ©',
      'completed': 'TerminÃ©'
    };

    toast.success('Statut de maintenance mis Ã  jour', {
      description: `${title} : ${statusMap[newStatus as keyof typeof statusMap] || newStatus}`,
      duration: 3000,
    });
  },

  // Notifications pour les transactions
  transactionCreated: (type: 'income' | 'expense', amount: number, description: string) => {
    const typeText = type === 'income' ? 'Recette' : 'DÃ©pense';
    const amountText = `${amount.toLocaleString()} FCFA`;
    
    toast.success(`${typeText} enregistrÃ©e !`, {
      description: `${amountText} - ${description}`,
      duration: 4000,
    });
  },

  // Notifications gÃ©nÃ©rales
  dataUpdated: (entityType: string) => {
    toast.info('DonnÃ©es mises Ã  jour', {
      description: `Les ${entityType} ont Ã©tÃ© synchronisÃ©es`,
      duration: 2000,
    });
  },

  demoMode: () => {
    toast.info('Mode dÃ©monstration actif', {
      description: 'Toutes les modifications sont temporaires et se rÃ©initialisent au rechargement',
      duration: 6000,
    });
  },

  realTimeUpdate: (message: string) => {
    toast.success('Mise Ã  jour en temps rÃ©el', {
      description: message,
      duration: 2000,
    });
  }
};

// Helper function to show a welcome notification for first-time users
export const showWelcomeNotification = () => {
  setTimeout(() => {
    toast.success('ðŸŽ‰ Bienvenue dans ImmoGest CI !', {
      description: 'Mode dÃ©monstration actif - testez toutes les fonctionnalitÃ©s sans limites',
      duration: 5000,
    });
  }, 1000);
};

// Helper function to show periodic tips
export const showDemoTips = () => {
  const tips = [
    'Ajoutez des transactions pour voir les graphiques se mettre Ã  jour',
    'CrÃ©ez des demandes de maintenance pour tester le systÃ¨me de suivi',
    'Assignez des locataires aux logements pour voir les statuts changer',
    'Toutes les donnÃ©es sont fonctionnelles et se mettent Ã  jour en temps rÃ©el'
  ];

  let tipIndex = 0;
  const showTip = () => {
    toast.info('ðŸ’¡ Astuce dÃ©monstration', {
      description: tips[tipIndex],
      duration: 4000,
    });
    tipIndex = (tipIndex + 1) % tips.length;
  };

  // Show first tip after 10 seconds, then every 30 seconds
  setTimeout(showTip, 10000);
  setInterval(showTip, 30000);
};